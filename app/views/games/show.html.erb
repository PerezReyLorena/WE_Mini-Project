<p>
  Game start:
  <%= @game.start %>
</p>

  <% if current_user_color(@game) == 'W'%>
      You are playing white against <%= partner(@game).username %>
  <% else %>
      You are playing black against <%= partner(@game).username %>
  <% end %>

  <%= image_tag partner(@game).image_url(:thumb) if partner(@game).image?%>
</p>


<!-- <% if not @state.nil?  %>State: <%= @state %> <% end %> -->
<p>

<% if not @sent_draw_request.nil? %>
    You sent a draw request to  <%= partner(@game).username %>!
      TODO: check status button
<% else %>

  <% if not @game.end.nil? %>
      The game is over! TODO: who is the winner?
  <% else %>

      <% if not @received_draw_request.nil? %>
          <%= partner(@game).username %> proposes a draw!
          <%= button_to 'Accept', controller: :draw_requests, action: "accept", id: @received_draw_request.id, class: "uk-button uk-button-small" %>
          <%= button_to 'Decline', controller: :draw_requests, action: "decline", id: @received_draw_request.id, data: { confirm: "Are you sure you want to draw this game?" }, class: "uk-button uk-button-small" %>
      <% end %>

    <% if current_user_turn?(@game, @turn)%>

        It's your turn! <!-- <%= button_to 'Make a move', moves_path(game_id: @game.id), action: 'create', class: "uk-button uk-button-small" %> -->
        Draw request to <%= partner(@game).username %>: <%= button_to 'Send', draw_requests_path(game_id: @game.id), class: "uk-button uk-button-small" %><br>

    <% else %>
        It's <%= partner(@game).username %>'s turn!
    <% end %>

  <% end %>
<% end %>





<div>
  <canvas id="chess_board" width="500" height="500">Your browser does not support canvas!</canvas>
</div>

<div>
  The correct entry format: f1r1->f2r2
</div>

<%= form_for @game.moves.last do |f| %>
    <div class="field">
      <%= f.label :from_to %><br>
      <%= f.text_field :from_to %>
    </div>
    <div class="actions">
      <%= f.submit %>
    </div>
<% end %>


<script type="text/javascript" charset="utf-8">
  var canvas = document.getElementById("chess_board");

// calculate position of the canvas DOM element on the page

var canvasPosition = {
    x: canvas.offsetLeft,
    y: canvas.offsetTop
};


var from = 'fxrx';
var to = 'fxrx';
/*
 * When the user clicks on a tile, check if variable from is already initialized.
 * If so, set value of to variable and submit. Else set value of from.
 */
canvas.onclick = function(e) {

    // use pageX and pageY to get the mouse position
    // relative to the browser window

    var mouse = {
        x: e.pageX - canvasPosition.x,
        y: e.pageY - canvasPosition.y
    }

    // now you have local coordinates,
    // which consider a (0,0) origin at the
    // top-left of canvas element
	var file = Math.floor((480-mouse.y)/60)+1;
	var rank = Math.floor((mouse.x-20)/60)+1;
	
	// alert('file: '+file+", rank: "+rank);
	if(from == 'fxrx') {
	  from = 'f'+file+'r'+rank;
	}
	else {
	  to = 'f'+file+'r'+rank;
	  var moveString = from+"->"+to;
	  
	  document.getElementById("move_from_to").value = moveString;
	  document.forms[1].submit();
	  from = 'fxrx';
	}
	// alert('from: '+from+' to: '+to);
};

  var context = canvas.getContext("2d");
  
  var wp = new Image();
  wp.src = '/assets/WP.jpg';
  var wr = new Image();
  wr.src = '/assets/WR.jpg';
  var wn = new Image();
  wn.src = '/assets/WN.jpg';
  var wb = new Image();
  wb.src = '/assets/WB.jpg';
  var wq = new Image();
  wq.src = '/assets/WQ.jpg';
  var wk = new Image();
  wk.src = '/assets/WK.jpg';
  
  var bp = new Image();
  bp.src = '/assets/BP.jpg';
  var br = new Image();
  br.src = '/assets/BR.jpg';
  var bn = new Image();
  bn.src = '/assets/BN.jpg';
  var bb = new Image();
  bb.src = '/assets/BB.jpg';
  var bq = new Image();
  bq.src = '/assets/BQ.jpg';
  var bk = new Image();
  bk.src = '/assets/BK.jpg';
  
  context.globalAlpha = 0.5;
  wr.onload = function() {
	<% for i in 0..7 %>
	  <% for j in 0..7 %>
		var f = <%= i %>;
		var r = <%= j %>;
		if(<%= @game.board_states.last.state[7-i][j] == "WP"%>) {
		  context.drawImage(wp, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "WR"%>) {
		  context.drawImage(wr, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "WN"%>) {
		  context.drawImage(wn, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "WB"%>) {
		  context.drawImage(wb, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "WQ"%>) {
		  context.drawImage(wq, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "WK"%>) {
		  context.drawImage(wk, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "BP"%>) {
		  context.drawImage(bp, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "BR"%>) {
		  context.drawImage(br, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "BN"%>) {
		  context.drawImage(bn, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "BB"%>) {
		  context.drawImage(bb, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "BQ"%>) {
		  context.drawImage(bq, 20+r*60, f*60);
		}
		else if(<%= @game.board_states.last.state[7-i][j] == "BK"%>) {
		  context.drawImage(bk, 20+r*60, f*60);
		}
	  <% end %>
	<% end %>
  }
  
  /* Fill the black tiles */
  context.fillStyle = "black";
  for(var i=0; i<4; i++) {
	for(var j=0; j<4; j++) {
      context.fillRect(i*120+80, j*120, 60, 60);
	}
  }
  for(var i=0; i<4; i++) {
	for(var j=0; j<4; j++) {
      context.fillRect(i*120+20, j*120+60, 60, 60);
	}
  }
  /* Draw the boarder of the board */
  context.moveTo( 20,  0);
  context.lineTo( 20,480);
  context.lineTo(500,480);
  context.lineTo(500,  0);
  context.lineTo( 20,  0);
  context.stroke();
  
  /* Draw the numeration of the files and the ranks */
  for(var i=1; i<9; i++) {
    context.fillText(i, 5, 530-i*60);
  }
  context.fillText('a', 40, 495);
  context.fillText('b', 100, 495);
  context.fillText('c', 160, 495);
  context.fillText('d', 220, 495);
  context.fillText('e', 280, 495);
  context.fillText('f', 340, 495);
  context.fillText('g', 400, 495);
  context.fillText('h', 460, 495);
</script>


View chess rules <%= link_to('here', "/chess_rules.html", :target => "_blank") %>